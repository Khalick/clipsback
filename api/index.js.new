// Vercel API adapter
import { app } from '../index.js';

export default async function handler(req, res) {
  try {
    console.log(`${req.method} ${req.url}`);
    
    // Convert the Vercel request to a Fetch API request
    const url = new URL(req.url, `http://${req.headers.host}`);
    
    // Create the init object based on request method
    const requestInit = {
      method: req.method,
      headers: new Headers(req.headers)
    };
    
    // Only add body for methods that can have a body (not GET or HEAD)
    if (req.body && req.method !== 'GET' && req.method !== 'HEAD') {
      requestInit.body = typeof req.body === 'string' ? req.body : JSON.stringify(req.body);
    }
    
    const request = new Request(url, requestInit);

    // Process the request with Hono
    const response = await app.fetch(request);
    
    // Convert the Fetch API response to a Vercel response
    res.statusCode = response.status;
    
    // Set headers
    for (const [key, value] of response.headers.entries()) {
      res.setHeader(key, value);
    }
    
    // Send the response body
    const body = await response.text();
    res.end(body);
  } catch (error) {
    console.error('Error in API handler:', error);
    
    // Send an error response
    res.statusCode = 500;
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify({ 
      error: 'Internal Server Error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    }));
  }
}
